image: docker:20.10.16
services:
  - name: docker:20.10.16-dind
    alias: docker

variables:
  DOCKER_HOST: "tcp://docker:2375"
  DOCKER_TLS_CERTDIR: ""
  DOCKER_DRIVER: overlay2

stages:
  - .pre
  - build
  - release

# 1) Build frontend/dist artifacts
build_dist:
  stage: .pre
  image: node:23-alpine
  tags:
    - alpine
  script:
    - npm install -g pnpm
    - pnpm install
    - pnpm build
  artifacts:
    paths:
      - dist/
    expire_in: 1 hour

# 2) Development build: tag by commit SHA
docker_dev:
  stage: build
  tags:
    - alpine
  image: docker:20.10.16
  before_script:
    - docker login -u gitlab-ci-token -p "$CI_JOB_TOKEN" "$CI_REGISTRY" # login to registry :contentReference[oaicite:2]{index=2}
    - docker pull "$CI_REGISTRY_IMAGE:cache" || true # restore cache :contentReference[oaicite:3]{index=3}
  script:
    - docker build \
      --pull \
      --cache-from "$CI_REGISTRY_IMAGE:cache" \
      --tag "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA" \
      --tag "$CI_REGISTRY_IMAGE:cache" \
      .
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA" # immutable dev tag :contentReference[oaicite:4]{index=4}
    - docker push "$CI_REGISTRY_IMAGE:cache"

  rules:
    - if: '$CI_COMMIT_BRANCH == "main" && $CI_COMMIT_TAG == null'
      when: on_success

# 3) Production build: tag by Git tag + latest
docker_prod:
  stage: release
  tags:
    - alpine
  image: docker:20.10.16
  before_script:
    - docker login -u gitlab-ci-token -p "$CI_JOB_TOKEN" "$CI_REGISTRY" # login :contentReference[oaicite:6]{index=6}
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG" -t "$CI_REGISTRY_IMAGE:latest" .
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG" # permanent version tag :contentReference[oaicite:7]{index=7}
    - docker push "$CI_REGISTRY_IMAGE:latest" # floating latest tag :contentReference[oaicite:8]{index=8}

  rules:
    - if: '$CI_COMMIT_BRANCH == "main" && $CI_COMMIT_TAG'
      when: on_success
