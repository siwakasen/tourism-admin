import {
    useCreateTestimonial,
    useUpdateTestimonial,
    useDeleteTestimonialMutation,
} from '../../_service/testimonials';
import * as yup from "yup";
import {yupResolver} from "@hookform/resolvers/yup";
import {toast} from "react-hot-toast";
import {useForm} from "react-hook-form";
import {useNavigate} from "react-router-dom";
import {
    TestimonialReqI,
    CreateTestimonialReqI,
    UpdateTestimonialReqI,
    Testimonial
} from "../../__interface/testi.interface"


import {testimonialsRoute} from '../../pages/testimonials';

export const useCreateUpdateCarsForm = (
    defaultValues?: CreateTestimonialReqI,
    data?: Testimonial | null
) =>{
    const schema = yup
        .object()
        .shape({
            name: yup.string().required("Name is required"),
            message: yup.string().required("Message is required"),
            country: yup.string().required("Country is required"),
            image: yup.mixed().required("Image is required").test("fileType", "Invalid file type", (value) => value instanceof File),
            access_token: yup.string().required("Access token is required"),
        })
        .required();

        const onSubmit = async (
            formData: CreateTestimonialReqI
        ) => {
            const navigate = useNavigate();
            if(data){
                try {
                    const response = await useUpdateTestimonial({
                        id: data.id,
                        ...formData,
                    });
                    if (response) {
                        toast.success("Testimonial updated successfully");
                        navigate(testimonialsRoute);
                    }
                } catch (error) {
                    toast.error("Failed to update testimonial");
                }
                return;
            }else{
                try {
                    const response = await useCreateTestimonial(formData as CreateTestimonialReqI);
                    if (response) {
                        toast.success("Testimonial created successfully");
                        navigate(testimonialsRoute);
                    }
                } catch (error) {
                    toast.error("Failed to create testimonial");
                }
            }
        };

        const {register, handleSubmit, formState, setValue}=
        useForm<CreateTestimonialReqI>({
            defaultValues,
            resolver: yupResolver(schema),
        });
}
